<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://acernus.github.io/atom.xml" rel="self" type="application/atom+xml" /><link href="https://acernus.github.io/" rel="alternate" type="text/html" /><updated>2019-06-13T15:06:14+08:00</updated><id>https://acernus.github.io/atom.xml</id><title type="html">亦然的博客</title><subtitle>技术随笔</subtitle><author><name>亦然</name></author><entry><title type="html">秒杀系统设计</title><link href="https://acernus.github.io/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/2019/06/13/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/" rel="alternate" type="text/html" title="秒杀系统设计" /><published>2019-06-13T00:00:00+08:00</published><updated>2019-06-13T00:00:00+08:00</updated><id>https://acernus.github.io/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/2019/06/13/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1</id><content type="html" xml:base="https://acernus.github.io/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/2019/06/13/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"></content><author><name>亦然</name></author><summary type="html"></summary></entry><entry><title type="html">短地址系统设计</title><link href="https://acernus.github.io/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/2019/06/12/%E7%9F%AD%E5%9C%B0%E5%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/" rel="alternate" type="text/html" title="短地址系统设计" /><published>2019-06-12T00:00:00+08:00</published><updated>2019-06-12T00:00:00+08:00</updated><id>https://acernus.github.io/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/2019/06/12/%E7%9F%AD%E5%9C%B0%E5%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1</id><content type="html" xml:base="https://acernus.github.io/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/2019/06/12/%E7%9F%AD%E5%9C%B0%E5%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/">&lt;p&gt;当前很多营销短信或者信息会使用短地址，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://t.cn/AXSwe12EW&lt;/code&gt; 的形式，有效的降低了url 的长度。那么一个可靠的短地址系统应该如何设计呢？&lt;/p&gt;

&lt;h1 id=&quot;方案设计&quot;&gt;方案设计&lt;/h1&gt;

&lt;h2 id=&quot;需求分析&quot;&gt;需求分析&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;地址尽可能的短&lt;/li&gt;
  &lt;li&gt;读请求远大于写请求&lt;/li&gt;
  &lt;li&gt;如需要自定义短地址，需要额外设计&lt;/li&gt;
  &lt;li&gt;长地址去重&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;短地址生成&quot;&gt;短地址生成&lt;/h2&gt;
&lt;p&gt;目前网上流传的关于短地址生成的，主要包括以下几种：&lt;/p&gt;

&lt;h3 id=&quot;hash&quot;&gt;Hash&lt;/h3&gt;
&lt;p&gt;我们可以使用各类的 hash 算法，将 hash 值作为短地址的值，呼声较高的是 Redis 采用的 &lt;a href=&quot;https://en.wikipedia.org/wiki/MurmurHash&quot;&gt;MurmurHash&lt;/a&gt;，可以很大的程度上减少 Hash 冲突。如果有冲突发生，可以采用线性探测，如在 hash 值后添加特殊值，或者序号，以此来解决冲突。Hash 算法难免会发生一些冲突，如果数据量较大的情况下，hash 冲突的概率也会大幅增加。因此，数据量较大的短地址系统中都不建议采取此种方式。&lt;/p&gt;

&lt;h3 id=&quot;发号器&quot;&gt;发号器&lt;/h3&gt;
&lt;p&gt;发号器的方案是相对来说比较标准的做法。主要分为两部分：发号和转换。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;发号。为了解决 Hash 冲突可能造成的问题，我们可以利用数据库的自增主键或者其他序列号如 snowflake，uuid 等方案，生成唯一的序号，这样每个地址都不会重复&lt;/li&gt;
  &lt;li&gt;转换。每个记录都有一条单独的记录，我们当然不能直接使用记录号，我们可以利用进制转换的思想，将序号转换为 N 进制，只要 N 足够大，那么表示一个数的长度就越短，目前流行的方案是转换为 62 进制，即由 0~9，a~z, A~Z 组成的数。这样的记录使用 7 位我们就能表示 62&lt;sup&gt;7&lt;/sup&gt; 个数，足够存储海量的 url，当然你也可以根据个性化变化进制与位数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过以上的方案，我们就能唯一的记录一条短地址与原地址对应关系。&lt;/p&gt;

&lt;h2 id=&quot;存储&quot;&gt;存储&lt;/h2&gt;
&lt;p&gt;基于上述需求，我们可以采用 MySQL + Redis 的形式。使用 MySQL 存储相关必要的信息，使用 Redis 进行缓存数据，以便快速读取。&lt;/p&gt;

&lt;p&gt;MySQL 中我们可以创建以下几个域：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;short_url&lt;/th&gt;
      &lt;th&gt;real_url&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;primary key&lt;/td&gt;
      &lt;td&gt;index(optional)&lt;/td&gt;
      &lt;td&gt;index&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;id 是 MySQL 中的自增主键，也是我们的短地址的序号；由于我们在查询时需要使用短地址找到对应的原地址，因此 &lt;code class=&quot;highlighter-rouge&quot;&gt;short_url&lt;/code&gt; 可以加上索引优化查询，当然你也可以直接根据进制的转换，先计算出序号，然后直接根据主键去查询，可以减少索引的开销；如果说业务需要去重，即同一个长地址对应的短地址返回相同的时，需要根据真实的 url 去查询是否存在，此时就会出现一个问题，如果长地址特别长，也会影响索引的开销，因此我们可以引入 md5，计算长地址的摘要
，建立索引进行查询，以此降低索引的开销。当然你也可以不用管去重的问题，直接生成新的。&lt;/p&gt;

&lt;p&gt;对于海量数据的情况，我们可以采用分库分表的形式，使用发号器按照号段进行发放：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20190612/numbering.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过以上形式可以进行简单的扩展。&lt;/p&gt;

&lt;h2 id=&quot;架构&quot;&gt;架构&lt;/h2&gt;

&lt;p&gt;通过上述需求分析与设计，我们可以画出以下系统的架构图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20190612/design.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这也是一个比较简单的结构，其中有可能出现的问题包括：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;redis 多实例取值时，需要 hash 到 slot 去直接拿，采用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Consistent_hashing&quot;&gt;一致性 hash&lt;/a&gt; 均摊负载&lt;/li&gt;
  &lt;li&gt;缓存更新可以切换为后台线程更新缓存，防止缓存的雪崩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上所述，我们就设计了一个简易的短地址系统。&lt;/p&gt;</content><author><name>亦然</name></author><summary type="html">当前很多营销短信或者信息会使用短地址，如 http://t.cn/AXSwe12EW 的形式，有效的降低了url 的长度。那么一个可靠的短地址系统应该如何设计呢？</summary></entry><entry><title type="html">漫谈缓存更新策略</title><link href="https://acernus.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/2019/06/09/%E6%BC%AB%E8%B0%88%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5/" rel="alternate" type="text/html" title="漫谈缓存更新策略" /><published>2019-06-09T00:00:00+08:00</published><updated>2019-06-09T00:00:00+08:00</updated><id>https://acernus.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/2019/06/09/%E6%BC%AB%E8%B0%88%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5</id><content type="html" xml:base="https://acernus.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/2019/06/09/%E6%BC%AB%E8%B0%88%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5/">&lt;p&gt;缓存是我们在当前架构中经常会采用的一种方式，如何利用缓存，何时更新成为了一个比较关键的问题。本文将分为以下几个部分阐释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么要使用缓存&lt;/li&gt;
  &lt;li&gt;缓存出现的问题&lt;/li&gt;
  &lt;li&gt;缓存更新策略&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;为什么要使用缓存&quot;&gt;为什么要使用缓存&lt;/h1&gt;

&lt;p&gt;当前的 web 系统中都会用到数据库&lt;/p&gt;</content><author><name>亦然</name></author><category term="缓存" /><summary type="html">缓存是我们在当前架构中经常会采用的一种方式，如何利用缓存，何时更新成为了一个比较关键的问题。本文将分为以下几个部分阐释：</summary></entry></feed>